# To scan for security issues ITAS Lab 5
name: Lab5 DevSecOps standard security pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
    SCA-Snyk:
        runs-on: ubuntu-latest
        needs: [trufflehog]
        steps:
        - uses: actions/checkout@v3
        - name: Run Snyk to check Docker image for vulnerabilities
          # Snyk can be used to break the build when it detects vulnerabilities.
          # In this case we want to upload the issues to GitHub Code Scanning
          continue-on-error: true
          uses: snyk/actions/docker@master
          env:
            # In order to use the Snyk Action you will need to have a Snyk API token.
            # See https://docs.snyk.io/integrations/ci-cd-integrations/github-actions-integration#getting-your-snyk-token
            # or you can sign up for free at https://snyk.io/login

            SNYK_TOKEN: ${{secrets.SNYK_TOKEN}}

          with:
            image: seanglencrossitas/itas276-lab4:latest
            args: --file=Dockerfile

        - name: save report as pipeline artifact
          uses: actions/upload-artifact@v3
          with:
            name: snyk-sca.sarif
            path: snyk.sarif

    SAST-Semgrep:
        runs-on: ubuntu-latest
        needs: [trufflehog]
        container:
            image: returntocorp/semgrep

        steps:   
            # Checkout source for scanning
            - name: clone application source code
              uses: actions/checkout@v3

            # Run semgrep default SAST and generate sarif report
            - name: full semgrep scan
              run: | 
                    semgrep \
                    --sarif --output semgrep-sast.sarif \
                    --metrics=off \
                    --config="p/default"
    
            # Upload report
            - name: save report as pipeline artifact
              uses: actions/upload-artifact@v3
              with:
                name: semgrep-sast.sarif
                path: semgrep-sast.sarif
    
    # Scan for code secrets using trufflehog
    trufflehog:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
        - name: Secret Scanning
          uses: trufflesecurity/trufflehog@main
          with:
            extra_args: --only-verified
    
